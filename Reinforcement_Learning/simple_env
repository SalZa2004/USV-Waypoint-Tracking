# simple_env.py

import random
import math

def haversine(lat1, lon1, lat2, lon2):
    # Rough distance calculation
    R = 6371e3  # meters
    phi1, phi2 = math.radians(lat1), math.radians(lat2)
    d_phi = math.radians(lat2 - lat1)
    d_lambda = math.radians(lon2 - lon1)

    a = math.sin(d_phi/2)**2 + math.cos(phi1) * math.cos(phi2) * math.sin(d_lambda/2)**2
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))

    return R * c  # in meters

def reset_environment():
    start_lat = 50.0 + random.uniform(-0.001, 0.001)
    start_lon = -1.0 + random.uniform(-0.001, 0.001)
    heading = random.uniform(0, 360)
    speed = 0
    wind_speed = random.uniform(0, 5)  # m/s
    wind_angle = random.uniform(0, 360)
    target_lat = 50.001
    target_lon = -1.001
    return [start_lat, start_lon, heading, speed, wind_speed, wind_angle, target_lat, target_lon]

def step_environment(state, action):
    lat, lon, heading, speed, wind_speed, wind_angle, target_lat, target_lon = state
    rz_thrust, forward_thrust = action

    # Update heading
    heading += rz_thrust * 0.1  # Turn proportional to rz_thrust
    heading %= 360

    # Update speed
    speed += (forward_thrust - speed) * 0.1  # Simple acceleration model

    # Move
    distance = speed * 0.1  # Assume timestep = 0.1s
    lat += (distance / 111111) * math.cos(math.radians(heading))
    lon += (distance / (111111 * math.cos(math.radians(lat)))) * math.sin(math.radians(heading))

    next_state = [lat, lon, heading, speed, wind_speed, wind_angle, target_lat, target_lon]

    dist_to_target = haversine(lat, lon, target_lat, target_lon)
    reward = -dist_to_target / 100.0  # closer is better
    done = dist_to_target < 5  # Goal reached within 5m

    return next_state, reward, done
